package expr;

import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import org.junit.Ignore;
import org.junit.Test;

import _st2_annotate.ConstexprEval;
import ast_expr.ExprExpression;
import ast_main.ParserMain;
import ast_parsers.ParseExpression;
import parse.Parse;

public class Test_ConstExprEval2 {

  // TODO: parser from string
  @Ignore
  @Test
  public void ceEval() throws IOException {
    Map<String, Integer> toeval = new HashMap<String, Integer>();

    //@formatter:off
    toeval.put("1 + ?(0==0, 1, 2) + 3", 5);
    toeval.put("1 + ?(0==0, ?(1==0, 1, 2), 2) + 4", 7);
    toeval.put("1 + ?(1==1, 2, 1/0)", 3);
    //
    toeval.put("((9*6)+6+4*(9*9)*(6+8)*(0*0+8+5+(1+8)+(4*1)))+?(2*0 == 6*0, 4+5, 6+9)", 118005);
    toeval.put("(?(9*6 == 9*6, (8+6), 5*5)+?(2*0 == 2*0, (6*3), 8*7))", 32);
    toeval.put("((0+1*(6*4)*(2+9)*(4*0))*(((3+5)*4*7)*(2+4*2+8))*?(4*6 == 4+5, 7+9, 6+9))", 0);
    toeval.put("(?((5*0) == (5*0), (8+9), 2+9)+?(4*9 == 4*9, (4+9), 4*8))", 30);
    toeval.put("(7*6+(4*6))*((1*4)+9*3)+7+9+0+9+(4+1*5*3)+?((0*9) == (0+3), (1+7), 6*2)", 2102);
    toeval.put("?(4+5 == 4+5, 1+5, 0*7)*?((7+1) == (7+1), 4+8, 6+8)", 72);
    toeval.put("(1+5*2*1+5*9+6*6+((0*1)+(7+2))*((5*2)+8*3))+?(7+0 == (3*2), (2*8), 7+9)", 414);
    toeval.put("(?(8*2 == 8*2, (9+9), (4*4))+?(9+7 == 9+7, (0*6), 4+4))", 18);
    toeval.put("(5*6)+(7+4)*3+4+9+6*(((5*0)+5*2)+(2*5)+(3*2))*?(7*1 == 4*6, (5*1), 4+5)", 1480);
    toeval.put("?((7+2) == (7+2), 6+6, 5*6)+?((2+3) == (2+3), 8*9, 8+9)", 84);
    toeval.put("(0*6+5*3+(9*2+5+2)*9+2+9+6+4*8*0+7)+?((2*1) == (4*4), 5+3, (4+3))", 271);
    toeval.put("?(8*9 == 8*9, 5+6, (3+1))*?(5+9 == 5+9, 4*9, 3*7)", 396);
    toeval.put("((0*6+5*9)+2+7+3*6)+(9*5*4+5)*(7+1*5*4)+?((8*8) == 7+3, (7*1), (8*9))", 5139);
    toeval.put("?((3+0) == (3+0), (3*4), 6*6)+?(8*4 == 8*4, 7*1, 5*1)", 19);
    toeval.put("(((1*6)+8*7+(2*9+0+4))*(2*5*2+3+(1*2)+(0*0))+?((6+8) == 5+0, 4+2, 3*9))", 2127);
    toeval.put("?((9*9) == (9*9), (1+4), (7*6))*?(9+2 == 9+2, 2*2, 7+6)", 20);
    toeval.put("(((7*8*0*5)*9+8*5+8)*9*0+3*1+(1*4)*3+2*?(3*1 == 4+9, (7*0), (6*1)))", 27);
    toeval.put("?(5+0 == 5+0, 8*6, (7*3))*?((8*4) == (8*4), (2*4), 9+7)", 384);
    toeval.put("8+8*5+7*(2*8)+(4+3)*(6*2+0+3*9*7+6*5)+?((2*3) == 4+7, 1*0, 2*5)", 1787);
    toeval.put("?(5*6 == 5*6, 5+7, 4+6)+?(0*7 == 0*7, 3+7, 9*6)", 22);
    toeval.put("(((8+1+8+5)+(0+7)+7*6)*((7*3)*5*0*5*9*3+3)*?(3*8 == 1+5, 8*7, 6+3))", 1917);
    toeval.put("?((7+1) == (7+1), 4+2, 7*7)*?((4*3) == (4*3), 8*8, 9+3)", 384);
    toeval.put("(6+2+7*0*7+6*9*2*(4+6+(1+2))*(9*9)*9*0*?((4*8) == 1+8, 1*8, 1*1))", 8);
    toeval.put("(?((5+2) == (5+2), (9*2), 7+8)+?(3+6 == 3+6, 9+1, 6*7))", 28);
    toeval.put("(1*0*1+1*(3+5+(9+3))*(1+6)+1*7+7*7*4+6+?((7*3) == 3*4, 8*6, (8*3)))", 373);
    toeval.put("?((9*3) == (9*3), (2*2), (1+5))*?((8+1) == (8+1), (5*9), (3+4))", 180);
    toeval.put("9*8*(6*3)+(7*9*(0*3))*5+4+0*2+0+7+4*1*?(6*7 == (7+7), (9*9), 6*5)", 1427);
    toeval.put("?(3+2 == 3+2, 9+9, 1+0)*?((9+2) == (9+2), 6*9, (5*4))", 972);
    toeval.put("(((7+9*2*8)*(7*6)+2+7)+(3+4)*1+3+(5+5+0+6))*?(2+0 == 2*7, 4*6, 2+0)", 12754);
    toeval.put("?(9+2 == 9+2, (5*1), 4*2)+?(6*4 == 6*4, (3+5), 3+2)", 13);
    toeval.put("((6*4)+(0+7)+(6*5*0+8))+(4*0)*4+8+0*7*8*2*?((8+9) == 4*9, (4*9), (9*4))", 47);
    toeval.put("?(2+1 == 2+1, (8+5), (2+9))+?((7+8) == (7+8), 4+6, (3+1))", 23);
    //
    toeval.put("1+1+(6*1)*9+1+9+1*(((9*5)+8*9)*((1*9)*(2*8)))*?(6*8 == 5*2, ?(7+9 == (2+3), 1+0, 3+1), ?((2+4) == 5+4, 0*8, (4+5)))", 151698);
    toeval.put("?(3+3 == 3+3, 3+3, 3+3)*?((6+4) == (6+4), (6+4), (6+4))", 60);
    toeval.put("(((5+7)+5*9)+0+9+1*5+4*7*(0+6)*(2*4*(4+0)))*?(1+9 == 2*6, ?(9*3 == (6*0), 5+4, 1+4), ?(4*3 == 5+6, (4+0), 3*5))", 81705);
    toeval.put("?(3*4 == 3*4, 3*4, 3*4)+?((8*9) == (8*9), (8*9), (8*9))", 84);
    toeval.put("(((9*6*3+0)*5+3+0+1)+(((0*8)+(3+0))+(9*4*(0*9))))+?((5*8) == 4*0, ?((0+0) == 5+6, 5*9, 4+9), ?(5*6 == 1+9, 2+7, 2*5))", 827);
    toeval.put("(?(7*7 == 7*7, 7*7, 7*7)+?((9*5) == (9*5), (9*5), (9*5)))", 94);
    toeval.put("((((1*4)+(4*6))*(0+2*7*3))*1*1*(2*6)+(1+9+(3+6))+?(7*8 == 9*2, ?((0+4) == 9*7, 1+3, (2*6)), ?(5+0 == 8*0, 5+3, (6+3))))", 14140);
    toeval.put("(?(9+7 == 9+7, 9+7, 9+7)+?((9*1) == (9*1), (9*1), (9*1)))", 25);
    toeval.put("5+7*4*7*(8*8+1*9)*5+4+7*1*(5+0)+3+1*?((2*3) == (3+1), ?(1*0 == (9*4), 2*1, 0*4), ?(8*8 == 2*2, 1+8, 4*2))", 71595);
    toeval.put("(?(9*2 == 9*2, 9*2, 9*2)+?((8+5) == (8+5), (8+5), (8+5)))", 31);
    toeval.put("4*7*9+9+1*2*4*2*(2*4+(2+8))*5*4+0+5*?(9*1 == 3+8, ?((3+1) == 8+2, 8+5, 4+3), ?((2*8) == 7*2, 1*0, 9*6))", 6291);
    toeval.put("(?(6*7 == 6*7, 6*7, 6*7)*?(1+5 == 1+5, 1+5, 1+5))", 252);
    toeval.put("((0+6*(9+4))*((2*8)+(7+7)))*(6+2+9*9)*((2+0)*(1+6))*?(3+8 == 6+8, ?(3*6 == 0*8, 4*8, 9+8), ?((7*7) == (3*6), 5*8, (6*5)))", 87469200);
    toeval.put("(?(7*9 == 7*9, 7*9, 7*9)+?((2+2) == (2+2), (2+2), (2+2)))", 67);
    toeval.put("(((4+6+4+6)+((2+5)+1+2)+((8+0)+(5+7)+6*6*0*9))+?(1*5 == 9+0, ?(4*7 == 9+7, (9+9), 9*3), ?(2*2 == 6*1, 5+0, 0*2)))", 50);
    toeval.put("?((0*4) == (0*4), (0*4), (0*4))+?((0*4) == (0*4), (0*4), (0*4))", 0);
    toeval.put("((2+5+(4*7))*(2+3*(3+1))+(0*6)*2+2+((0*1)+5*8))*?((5+0) == 0*4, ?(0+8 == (9+8), 8+8, 3+0), ?(8+7 == (2+8), 1+9, 4*8))", 17024);
    toeval.put("(?(3*4 == 3*4, 3*4, 3*4)+?(1*6 == 1*6, 1*6, 1*6))", 18);
    toeval.put("((8+7+4*5+5*9*3*6)+(1*1*(5*1))+(5+7)+4+7+?(2*5 == (4+7), ?(1*3 == (9+6), (0+6), 1*6), ?(2+7 == 6*6, 0+9, 4+4)))", 881);
    toeval.put("(?(7+0 == 7+0, 7+0, 7+0)+?(8+3 == 8+3, 8+3, 8+3))", 18);
    toeval.put("((7*7+8+0*7*1*6*0)*(7*8+(6+7))*(5+1)*(4*7)+?(4*4 == (5*2), ?((5*0) == 9*3, 6*8, 9*3), ?((6*7) == (4*0), 3+9, 2*1)))", 660746);
    toeval.put("?((9*2) == (9*2), (9*2), (9*2))*?(4+3 == 4+3, 4+3, 4+3)", 126);
    toeval.put("(((6*0+0*5)*5*6+(8+8)+((0+6+6+7)+(3+4)*7*2))*?(8*8 == 8+7, ?(1+4 == 8+7, 7*5, (6+8)), ?(2+6 == (9*6), 3+1, (9*5))))", 5985);
    toeval.put("(?((6*3) == (6*3), (6*3), (6*3))+?(9*0 == 9*0, 9*0, 9*0))", 18);
    toeval.put("((2+5+2*6+(7+8)+0+0)*(0+7)+6+0*(6*6)+8*3*?(6+4 == (0+4), ?(2+3 == 6+9, (0*4), (0*3)), ?((8+6) == (9+8), 0*4, 2*8)))", 628);
    toeval.put("(?(7*5 == 7*5, 7*5, 7*5)+?(4+9 == 4+9, 4+9, 4+9))", 48);
    toeval.put("(8+9)+9*6+(0+6*(0+2))*(9*2)+4*8*8*8*0+9*?(5*2 == 0+5, ?(6+7 == 1*5, 8*8, 5*8), ?(0*1 == 8+2, 6*4, 6+5))", 386);
    toeval.put("?((0*1) == (0*1), (0*1), (0*1))+?((0+3) == (0+3), (0+3), (0+3))", 3);
    toeval.put("(((4+6)+9*9+(2*3)*(8*5)*(1+8+1+0+8+0*6+8))+?(0*1 == 9*6, ?((1*2) == 5*5, 8+5, 4+6), ?(8*9 == 8+3, 4+9, (3+0))))", 6334);
    toeval.put("?(5+8 == 5+8, 5+8, 5+8)+?(2+1 == 2+1, 2+1, 2+1)", 16);
    toeval.put("(4*4*7*9*8*0*5*9)*((1+9+0*6)*(8*7)*(4*2))*?(0+2 == 9*2, ?(5*9 == (4*9), 3+4, 5+2), ?(2+7 == (5+2), 4*9, 3*8))", 0);
    toeval.put("?((0+1) == (0+1), (0+1), (0+1))*?((2*1) == (2*1), (2*1), (2*1))", 2);
    ///
    toeval.put("((9+6*0*9)+(4+5)*(4+4))*((4+4)+0*2+(0+0+0*9))+?((2*4) == 5+1, ?(9*1 == (2+1), 2+3, (7+3)), ?(2*4 == (9+9), 0+3, 9+4))", 661);
    toeval.put("(?(1*6 == 1*6, 9*5, 2*2)+?(4*8 == 4*8, 4+6, (9*6)))", 55);
    toeval.put("(5+3*5+4)+((6+0)*(1+9))*((7*7)*(7+9))+9*7+(6+0)*?(1*5 == (7+3), ?(8*7 == (2+0), 7*7, 6*0), ?(1+5 == (8+7), 2+4, 4+6))", 47187);
    toeval.put("(?(8+6 == 8+6, (8+5), (3+5))+?((6*2) == (6*2), 2*4, 6*5))", 21);
    toeval.put("(5+3*3*8+(6*3+5*9))+(9*0)*(9*8)+((3*3)*2+0)*?(8+0 == 9+9, ?(8*1 == 7*4, 7+9, 2*4), ?(3*8 == (0+2), 1+0, 8*8))", 1292);
    toeval.put("?(2*6 == 2*6, (6*7), (1*6))+?(2*1 == 2*1, 2*6, 2+5)", 54);
    toeval.put("(((3*4)*7*8*0+4+5*5*0*4+5+4+(3+2*0+4))+?(8+0 == (6+7), ?(1*6 == 8+5, (0+0), (8+2)), ?(5*5 == 9*2, 6+3, 3*0)))", 20);
    toeval.put("(?(2*6 == 2*6, 4+1, (3*4))+?((4+8) == (4+8), 8+3, 6*0))", 16);
    toeval.put("6+5*0*1+7+2*9+5+(4+0*8+5*5*5*(3*1))+?(6*5 == 6*0, ?(6*5 == (1+8), (7*2), (1+5)), ?(4+3 == (7*2), (2+4), 0+5))", 420);
    toeval.put("(?(3+9 == 3+9, 0*9, (7+3))*?((0*8) == (0*8), (0*7), 1+3))", 0);
    toeval.put("(0*8+(5+9)+(4*3*7*2))*(1*0)*(4+6)+(1*3*(2+1))+?(3*9 == (3*3), ?(2+8 == 4+4, (7*6), (4+4)), ?(5*5 == (0*3), 1+7, 6+6))", 21);
    toeval.put("?(0*0 == 0*0, 1*4, 7+2)+?((5*1) == (5*1), 6*0, 8+5)", 4);
    toeval.put("(3*5*5*5*9+5+1+3)*5*0*4*6+0+5*1*3+?(7+6 == (1*0), ?((9*3) == (3*2), 4+8, (6*5)), ?(2*5 == (1+2), 0*3, 8*9))", 87);
    toeval.put("(?(5+2 == 5+2, (3+6), 0*1)+?(1+4 == 1+4, 9*7, 9*9))", 72);
    toeval.put("(((3+0)*2+5+4+9*2+9*5*0+8*7+(0+5+(6+2)))*?(7+2 == 6+7, ?(5*5 == 6+3, 5+9, (2*5)), ?(5*5 == (8*5), 5*9, 4*1)))", 408);
    toeval.put("?(0*5 == 0*5, 9+6, 6+9)+?(9+1 == 9+1, 0+5, (6+3))", 20);
    toeval.put("(((7*0)+9*4+6+1+6+1)+(4+6)+9+2*5*9+9+9+?(4*7 == (7*2), ?(2+5 == (5*6), 2*0, 2*7), ?((6*1) == (1+9), 7*7, 5+8)))", 190);
    toeval.put("?((4*7) == (4*7), 1*4, (1*4))*?(5*8 == 5*8, 8*6, 8+1)", 192);
    toeval.put("(5+9+(4+4))+(2+7)*5+2*(7*1+(8+1)*((6*7)+2+2))+?(0*9 == 7+9, ?(6+0 == (5+1), (2*8), (4*9)), ?((1+5) == 6*1, (9*7), 2+3))", 972);
    toeval.put("?((8*1) == (8*1), 2+3, 4*5)*?(2*7 == 2*7, 1*8, (0*6))", 40);
    toeval.put("((3+8*(1*7))*9+5+(4+9)*(7+8)+(2+4)+5+4*1*9+?((2*4) == 9*5, ?(8+7 == 0*6, 8+7, 2*8), ?(0+3 == (7+3), (7*3), 5*5)))", 803);
    toeval.put("?(9+4 == 9+4, 6+1, 2+3)*?(6+7 == 6+7, (9*8), 1*8)", 504);
    toeval.put("2+6*(8*0)+(6+2*8*4)*4+5*4+3*7+4+3*6+?(5+6 == 8*6, ?(8+9 == 0+5, 8+3, 7+2), ?((3*7) == (3+6), 8+0, (0*5)))", 345);
    toeval.put("(?(7+8 == 7+8, (0+1), 4+9)+?(8+7 == 8+7, (7*1), 8+8))", 8);
    toeval.put("(3+9*3+8)*4+7+5*3+(6*6*(3*7)+(5*7)*6*9)+?((3+0) == 0*2, ?((1*3) == 5+7, (9*2), 5+7), ?((1+5) == 3+6, 3+4, 6*2))", 2832);
    toeval.put("?(0+5 == 0+5, (2+3), (1+7))+?((4+2) == (4+2), 7+8, 5+8)", 20);
    toeval.put("(4+5*4+0)+1*3*(8+3)*(3*4*3+2*((3*7)*6+1))*?((6+2) == 5*0, ?(7*7 == 9+4, (2+8), 3+0), ?((5+2) == (6*0), 6+3, 6*5))", 287124);
    toeval.put("?((0*4) == (0*4), (7*3), (5+7))*?(2*1 == 2*1, 3+4, 5+2)", 147);
    toeval.put("(3+9*3+6*7+0*(4*5)+(4+4+6*5*7*3*0*4))+?(8*0 == 2*4, ?(8*4 == (2*1), 1*0, 3+3), ?(9*8 == 4+9, (0+7), 2+2))", 84);
    toeval.put("?(4*1 == 4*1, (5*2), (3+7))*?(8+3 == 8+3, 6*4, 9*9)", 240);
    toeval.put("6+5*9*9*((5*0)+(1+6))+(3*3)*0*8+(1*0+9*2)+?(6*3 == (5*4), ?(1*8 == 4+9, 3*9, (7*9)), ?(0*2 == 6+3, (3+6), 2*7))", 2873);
    toeval.put("?(1*7 == 1*7, (3*2), 2+5)+?(3+1 == 3+1, 5*6, 0*1)", 36);
    //
    toeval.put("9+7*0*4+3*1*7*9+(3*5)*(1+9)*(6+7+(9+5))+?(0*1 == 7+0, ?(0*0 == 2+8, 9*9, 8*0), ?(2*8 == (8*3), (9*2), 2*8))", 4264);
    toeval.put("(?(5+1 == 5+1, ((6+3+9+4)*4+6*3*1)*6+7+(5+7)*8*1+(2+4), (6+2*9*8)+(5+1)*2*7+1+4+(9*8)+2+0*(0*6))+?(4+2 == 4+2, (((7+2*4*0)+(8+5)+3+0)+((7*1+(0*6))*(6*6)*9+8)), (6*2*(2+1))*(3+6)+8*7+8*6+0*8+4+6*(7*2)))", 3044);
    toeval.put("((9+5*(0+0))*2*2*(3+9)+8*4+5+3*7*3*4*5)+?(7*5 == 7*3, ?((1+7) == (5*2), 4+0, (1+8)), ?(7+0 == 3*1, 3*7, 8*7))", 1785);
    toeval.put("(?(6*4 == 6*4, (7+1)+8*7+(0+1*(3*8))*(4*5+9+7)+(5+2)+6+8, (2*2*(4+5))*(9*6)*(0+6)+((2*2)*(0*9))*(3*4+7+7))+?(7+0 == 7+0, 7+0+2*3+(2+0)*8*0+2+7+9+3*(2+5+(9+2)), ((1*8)*(4+3)*(6+4)*7*6*3+1*6+1+(7+7)*(1*4))))", 1034);
    toeval.put("(4+8*8+7+(6+2+9*5))*((9*7+0+9)+8+7*(2+5))+?(4+5 == 6+0, ?(3+2 == 1+9, 5+6, 0*9), ?(5+2 == (0+7), (8+3), (8+1)))", 16523);
    toeval.put("?(1*6 == 1*6, (((4+3)*4*2)*(5+5*1+8)+((7+2)+9*2)*5+6*(3*0)), (4+8+4+6+(7*8)+(9+0)+0*7+6+5+6+0+(9+1)))*?((1*0) == (1*0), (6*5+(0+2)*(5*5+6*0)+1*6+4*5*((6+9)+1*1)), ((2*4*8+0*8+6+1+8)+(8*3*9*8)+9+2+3+7))", 464058);
    toeval.put("6*0*9*5+7*8*5+0+(7*3*5*1)+2+6*(5*0)*?(6*0 == (5*2), ?((5+8) == 5+8, 7*2, 7*5), ?(4*2 == 8+1, 4*2, 8*9))", 387);
    toeval.put("?(5*0 == 5*0, 9+7+6+3+(3*8)*9+5+1+3+2+4+9+4*(3*8), (7+8+1+8+(3*4)*6*6)*((3+5)*(7+6))+6+0+8+3)+?(9*6 == 9*6, ((2*3)*5+2)*1*9*8+9*(3+0)*2+3+(6*0+1+2), ((7*7+5*8+(9*2)*8*9)*(4*5+6*6+2*1+7+8)))", 2725);
    toeval.put("(3*5)+1*2+((7*5)*(9*2))+((6+3+3+5)*(3+1+1*2))+?(0+9 == 9*3, ?(1+4 == 8*4, 9+8, (2*7)), ?(9+8 == 2*3, (7*2), 2*9))", 767);
    toeval.put("(?((0+8) == (0+8), (7*2)+6*0+((2*3)+2*0)*2*6*(7*5)*(7+5)*(2+9), (5*2*9+3)*(2+2*(3*8))*((6*3)+1+7)*(8*3*6+3))*?(2*6 == 2*6, (((3+4+9+4)+2*2+4*3)*(1+6)+(3+7)+4+1*(9*1)), ((0*7)*9*8)+3*5*9+6*2*4+(0*0)+8+2*1+4))", 91479850);
    toeval.put("((1*0+2+8)*(5*4)*6+1)*9+3*(4*4)*0*4*4+4*?(8*9 == (4*6), ?((7*1) == (6*6), (7*2), 0+7), ?(3+3 == 5+5, 7+3, (4+9)))", 10861);
    toeval.put("(?(0+2 == 0+2, 9+9*9+3+(2*3)*8*8+(1+8+4*1*8*1*0*8), 4+0*(9*6)*2+2+(8+2)+(5+1+8+9)*7*1+5*8)*?(2*4 == 2*4, (0+1*(1*8)*(1+8)+1*9)+(8+8)+(6*5)*(8*8*7*2), (2+6*(5*0))+((2*1)+8*8)+((9+4+(1*1))+(4+0)*6+3)))", 13110822);
    toeval.put("((4*9)*(2*9)*1+7+8*2+2+0+3+7+(8+3+(6+8))+?(0*9 == 6+9, ?(0*4 == 0*1, 8*7, (0*6)), ?(8+0 == 8*2, 0*5, 5+9)))", 722);
    toeval.put("(?(8+7 == 8+7, (((4*6*9*3)*3+2*5+1)+(0+2+1+7*6*7+7*2)), ((9*9*(5+2))+(3+4*(7+7)))*((8+5)*8+4)+(4*8*1+2))*?(6*1 == 6*1, (7+6*5*2)*5*2*1*8*((5*2)*(0+0)*3+4*(6+7)), (4+3*3+4*9*7+6+1)*1+9+6*0+(8*1*4*2)))", 631579520);
    toeval.put("(9*5*(5*1)*(2*7*0+6))+(3+7*2*9)*6*4*8+8+?((8*1) == 2+9, ?(4+6 == 1*8, 9*5, 4*6), ?(2*8 == (0+2), 3*7, (8*5)))", 26166);
    toeval.put("(?(8+0 == 8+0, ((9+6+4*0*6*3*1*7)*(7+1)+7*3+((7+7)+0*8)), (7+5)*(2+5)+9+7*2*6*(3+5*(1*7))*0+7+0*3)*?((1+4) == (1+4), ((2+9)*9+7*((9*6)+2+1))+(6+8*8+7)+4*6+(6*6), (8+1+(4+5)*(0+7)*6+6+2+3+8+3+5+2*(7+6))))", 98425);
    toeval.put("8*8+9*8*8+3*0+5+(9+8+0*5)*6+3+(7*7)*?((7+6) == 7+8, ?((1+8) == 8+5, (2*6), 4+0), ?(7+6 == (2*2), 3*9, 3+3))", 1044);
    toeval.put("?(1+6 == 1+6, (6+0)*(0+6)*8+0*4*2*1+3*(9*3)*(1+8+(3*0)), (8*0*9+1+(3+2)*(1*0))+(2+1)+9*9*(9+7)*(5+0))+?(2*8 == 2*8, (((0*3*(8+6))*4+5+1+6)+(0+5+(1*7))*(8*9+6+9)), 8*9*5*9+((9+7)*1*1)+(5*3*(7*7)+(3*4+(0*4))))", 2073);
    toeval.put("(5+6*(4*4)+(0*7*1*0)+(5*1*(4*1))+4+4+6+8)*?(5*2 == 7+0, ?(5*1 == 7*8, 5*6, 8+2), ?((7*9) == 9*9, (1*3), 8*1))", 1144);
    toeval.put("(?(9+3 == 9+3, (0+9*6*9*4+5+6*2*(6*3*(5*4)*7*3*5*3)), (7+4*9*2*(4+3)+(8+3))+((8*0+(7*3))+3+9+3*1))*?(4+6 == 4+6, (((0*9)*(3+8)*(0+6*(3+8)))*0+4+(5*8)*6+6*2*4), (((6*5)*3+2)+5+2*(6+0))*5*8+7+3*(2+0*(4+5))))", 397922708);
    toeval.put("((9*4)+3*2*((7+7)*4+7))+5+7*7+3+8*5*5+5*?(0*9 == (4+9), ?((2+1) == 9+3, 8+3, 7*3), ?((9+7) == 9+4, 9+0, 4+0))", 691);
    toeval.put("?(2*2 == 2*2, (9*5+3*0+4+0+(9*4))*(1+1)+2+7*7+1*7+3, ((4*9)*5*6)+7*6+8+2*(((0*6)+(2+8))+(8*1+5*5)))+?(7*3 == 7*3, (9+1*7*5*5*0*2+8*((5*4*2+1)+(5*6*5+6))), (5+6*2*0)+(3+0)+9+3*(2*9*(8*3)*(0*7)+(8*8)))", 1816);
    toeval.put("((6+3*1+8)*(9*5*9*1)+(0*0*4*9+8*4+0+0))*?(3+6 == (0+8), ?(3+8 == (3+4), 5+0, 9*9), ?(3*4 == (7*2), 4*3, (1*9)))", 62253);
    toeval.put("?((6+2) == (6+2), ((2*5)*0*1+((5*7)+(4*0))+(6*1*3*5*9+9+0*9)), (9+7)+6+2*4+5*5*0+6+9*2+3+(1*3)+(9+8))*?((9*6) == (9*6), (6+3)+5+1+(9*2)*2*2*3*5*5*1+(7+5+(3*5)), (5+0*(4*4))+6*5*(1*0)+(9+4+3+2*(7+6+3+6)))", 4647468);
    toeval.put("1+8+(6+7)*8*0+4*5*(6*2)+4+8+((9*4)*2+5)*?(4+4 == 0*3, ?(9*3 == 4+8, 6*2, 1+5), ?(7*6 == 7*9, (7+0), 3+6))", 954);
    toeval.put("?(6*5 == 6*5, (7+2*4+1*(3+6)*8*3)+(2*3)+(8*5)*(1+8*0+1), (6*6*6*2)*(0+9)+4*3*((0+6)*(4+6)*(1+0)+7+2))*?((0+8) == (0+8), ((6*8)*(3+8))+((3+6)*4*6)+(2+2+(4*1))*2+9+9*4, ((4+8*3+6)+2*9+2*8)*(8+4+3*8)+6*6*9+8)", 255185);
    toeval.put("(5*8+(4*8)+(8+7+2+9)*((0+2)*(8*0)+8*2*0+4))*?(0+1 == 4+6, ?(3+8 == (8*9), 5*6, 6*2), ?(2*3 == 8*0, (4+2), 5+7))", 2112);
    toeval.put("?(0*3 == 0*3, 3+2*3+7+(0+1+6*0)*(5+3)+5*1*8*1+8*9, (1*8+2*2*(0+9*5*9))+7+8+0*5+(0*2)+0+9)+?(1+8 == 1+8, 9*1+7+2+(9*7)*(5*9)*((5*8)*8*1)*2*9+1+5, ((3+5)*3*9+((7*1)+9*8)*(8*7+9+3)+((2+2)*(0*1))))", 16329760);
    toeval.put("((((9+1)+(5+3))*(0*9)*3+5)*(3+9+2*8)+(1+5)+7+5+?(3+5 == 2+1, ?(3*1 == (9*8), 3+4, 2*2), ?(5*2 == 9*0, (4*0), 7+9)))", 174);
    toeval.put("?((3+0) == (3+0), 5*4+9+4*(0*8)+(1+9)+((3*9+2*1)+(8+2+6+1)), (8+9)*(5+3)*7*3+8*3*9*3+4*4*(6*9*2+2))*?((0+6) == (0+6), ((3*0+0+8)+(2*2)*1+7)*8*5+6*7*3*3+7*0, ((9+6*(8+2))*(0+4+5+3)*((9*0)+5*9*((2*7)+8+9))))", 96730);
    toeval.put("(4+9+(7+7)*8*4+2*7+((5+3)+(7+6)+7*8*(0+7)))*?((7+6) == 3*3, ?((4+8) == 4+5, 7+6, 9*5), ?(4*1 == 8+2, 9+3, 8*2))", 14208);
    toeval.put("(?(1+0 == 1+0, (3*4+5+4*(1+6)*0*0+(4*8+(6*7))+(3+6)+(7*4)), (2*7)*4+5*7*7*8*1+(4*4+4+5)*(1+9+(3*2)))+?((4+8) == (4+8), (((0+9)*(8*9)*3+0*5*2)+(7+2*4*3)*((3+9)*0*0)), ((6+3+1+9*(2+9*(7*7)))*(4+3*1*9)+(3*3*7*0))))", 2072);
    //@formatter:on

    for (Entry<String, Integer> ent : toeval.entrySet()) {
      String str = ent.getKey();
      long expected = ent.getValue().longValue();

      Parse p = new ParserMain(new StringBuilder(ent.getKey())).initiateParse();

      ExprExpression expr = new ParseExpression(p).e_const_expr();
      long actual = ConstexprEval.ce(expr);

      if (expected != actual) {
        System.out.println("NO: " + str);
      }

      assertEquals(expected, actual);
    }

  }

}
