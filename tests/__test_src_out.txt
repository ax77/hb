    //@formatter:off
    StringBuilder sb = new StringBuilder();
    sb.append("static size_t MIN_HEAP_PTR_ADDR = SIZE_MAX;           \n");
    sb.append("static size_t MAX_HEAP_PTR_ADDR = 0;                  \n");
    sb.append("static void *hcalloc(size_t count, size_t elsize) {   \n");
    sb.append("    assert(count);                                    \n");
    sb.append("    assert(elsize);                                   \n");
    sb.append("    void *ret = NULL;                                 \n");
    sb.append("    ret = calloc(count, elsize);                      \n");
    sb.append("    if(ret == NULL) {                                 \n");
    sb.append("        ret = calloc(count, elsize);                  \n");
    sb.append("        if(ret == NULL) {                             \n");
    sb.append("            ret = calloc(count, elsize);              \n");
    sb.append("        }                                             \n");
    sb.append("    }                                                 \n");
    sb.append("    assert(ret);                                      \n");
    sb.append("    size_t iptr = (size_t) ret;                       \n");
    sb.append("    if(iptr < MIN_HEAP_PTR_ADDR) {                    \n");
    sb.append("        MIN_HEAP_PTR_ADDR = iptr;                     \n");
    sb.append("    }                                                 \n");
    sb.append("    if(iptr > MAX_HEAP_PTR_ADDR) {                    \n");
    sb.append("        MAX_HEAP_PTR_ADDR = iptr;                     \n");
    sb.append("    }                                                 \n");
    sb.append("    return ret;                                       \n");
    sb.append("}                                                     \n");
    sb.append("static void drop_ptr(void **ptr, void *set) {         \n");
    sb.append("    assert(ptr);                                      \n");
    sb.append("    assert(*ptr);                                     \n");
    sb.append("    assert(set);                                      \n");
    sb.append("    // was set already, and possibly was freed too.   \n");
    sb.append("    if(*ptr == set) {                                 \n");
    sb.append("        return;                                       \n");
    sb.append("    }                                                 \n");
    sb.append("    // primitive checking -                           \n");
    sb.append("    // whether the address come from the heap         \n");
    sb.append("    size_t iptr = (size_t) *ptr;                      \n");
    sb.append("    if(iptr < MIN_HEAP_PTR_ADDR) {                    \n");
    sb.append("        return;                                       \n");
    sb.append("    }                                                 \n");
    sb.append("    if(iptr > MAX_HEAP_PTR_ADDR) {                    \n");
    sb.append("        return;                                       \n");
    sb.append("    }                                                 \n");
    sb.append("    // drop                                           \n");
    sb.append("    free(*ptr);                                       \n");
    sb.append("    *ptr = set;                                       \n");
    sb.append("}                                                     \n");
    //@formatter:on
