class aux_union<u8, u16, u32, u64, f64>
{
  let a: u8;
  let b: u16;
  let c: u32;
  let d: u64;
  let e: f64;
}

class opt<i32>
{
  let elem: i32;
}

class opt<opt<i32>>
{
  let elem: opt<i32>;
}

class opt<opt<opt<i32>>>
{
  let elem: opt<opt<i32>>;
}

class opt<opt<opt<opt<i32>>>>
{
  let elem: opt<opt<opt<i32>>>;
}

class opt<opt<opt<opt<opt<i32>>>>>
{
  let elem: opt<opt<opt<opt<i32>>>>;
}

class opt<[i32]>
{
  let elem: [i32];
}

class opt<opt<[i32]>>
{
  let elem: opt<[i32]>;
}

class opt<opt<opt<[i32]>>>
{
  let elem: opt<opt<[i32]>>;
}

class opt<opt<opt<opt<[i32]>>>>
{
  let elem: opt<opt<opt<[i32]>>>;
}

class opt<opt<opt<opt<opt<[i32]>>>>>
{
  let elem: opt<opt<opt<opt<[i32]>>>>;
}

class test
{
  var aux_union: aux_union<u8, u16, u32, u64, f64>;
  var opt5: opt<opt<opt<opt<opt<i32>>>>>;
  var opt4: opt<opt<opt<opt<i32>>>>;
  var opt3: opt<opt<opt<i32>>>;
  var opt2: opt<opt<i32>>;
  var opt1: opt<i32>;
  var optarr1: opt<[i32]>;
  var optarr2: opt<opt<[i32]>>;
  var optarr3: opt<opt<opt<[i32]>>>;
  var optarr4: opt<opt<opt<opt<[i32]>>>>;
  var optarr5: opt<opt<opt<opt<opt<[i32]>>>>>;
  var a: i32;
  var b: i32;
  var c: i32 = a >> b >> 1;
  var arrofgen1d: [opt<i32>];
  let arrofgen2d: [[opt<i32>]];
  var arrofgen_of_gen1: [opt<opt<i32>>];
  var arrofgen_of_gen2: [[opt<opt<i32>>]];
}

