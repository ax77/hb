    //@formatter:off
    StringBuilder sb = new StringBuilder();
    sb.append("class ptr<T> {                                             //001 \n");
    sb.append("  std.pointer<T> raw_data;                                 //002 \n");
    sb.append("  int size;                                                //003 \n");
    sb.append("  ptr(int size) {                                          //004 \n");
    sb.append("    this.raw_data = std.mem_malloc<T>(raw_data, size);     //005 \n");
    sb.append("    this.size = size;                                      //006 \n");
    sb.append("  }                                                        //007 \n");
    sb.append("  void destroy() {                                         //008 \n");
    sb.append("    std.mem_free<T>(raw_data);                             //009 \n");
    sb.append("  }                                                        //010 \n");
    sb.append("  T get(int at) {                                          //011 \n");
    sb.append("    std.assert_true(at < size);                            //012 \n");
    sb.append("    return std.mem_get<T>(raw_data, at);                   //013 \n");
    sb.append("  }                                                        //014 \n");
    sb.append("  T set(int at, T e) {                                     //015 \n");
    sb.append("    std.assert_true(at < size);                            //016 \n");
    sb.append("    T old = std.mem_get<T>(raw_data, at);                  //017 \n");
    sb.append("    std.mem_set<T>(raw_data, at, e);                       //018 \n");
    sb.append("    return old;                                            //019 \n");
    sb.append("  }                                                        //020 \n");
    sb.append("}                                                          //021 \n");
    sb.append("class vec<T>                                               //022 \n");
    sb.append("{                                                          //023 \n");
    sb.append("  ptr<T> data;                                             //024 \n");
    sb.append("  int size;                                                //025 \n");
    sb.append("  int alloc;                                               //026 \n");
    sb.append("  vec() {                                                  //027 \n");
    sb.append("    this.size = 0;                                         //028 \n");
    sb.append("    this.alloc = 2;                                        //029 \n");
    sb.append("    this.data = new ptr<T>(sizeof(T) * this.alloc);        //030 \n");
    sb.append("  }                                                        //031 \n");
    sb.append("  void add(T e) {                                          //032 \n");
    sb.append("    if(size >= alloc) {                                    //033 \n");
    sb.append("      alloc *= 2;                                          //034 \n");
    sb.append("      ptr<T> ndata = new ptr<T>(sizeof(T) * this.alloc);   //035 \n");
    sb.append("      for(int i = 0; i < size; i += 1) {                   //036 \n");
    sb.append("        ndata.set(i, data.get(i));                         //037 \n");
    sb.append("      }                                                    //038 \n");
    sb.append("      data.destroy();                                      //039 \n");
    sb.append("      data = ndata;                                        //040 \n");
    sb.append("    }                                                      //041 \n");
    sb.append("    data.set(size, e);                                     //042 \n");
    sb.append("    size += 1;                                             //043 \n");
    sb.append("  }                                                        //044 \n");
    sb.append("  int size() {                                             //045 \n");
    sb.append("    return size;                                           //046 \n");
    sb.append("  }                                                        //047 \n");
    sb.append("  T get(int index) {                                       //048 \n");
    sb.append("    std.assert_true(size < index);                         //049 \n");
    sb.append("    return data.get(at);                                   //050 \n");
    sb.append("  }                                                        //051 \n");
    sb.append("  T set(int index, T e) {                                  //052 \n");
    sb.append("    std.assert_true(size < index);                         //053 \n");
    sb.append("    return data.set(index, e);                             //054 \n");
    sb.append("  }                                                        //055 \n");
    sb.append("}                                                          //056 \n");
    sb.append("class main_class                                           //057 \n");
    sb.append("{                                                          //058 \n");
    sb.append("  int main()                                               //059 \n");
    sb.append("  {                                                        //060 \n");
    sb.append("    vec<char> x = new vec<char>();                         //061 \n");
    sb.append("    x.add(\'a\');                                          //062 \n");
    sb.append("    x.add(\'b\');                                          //063 \n");
    sb.append("    x.add(\'c\');                                          //064 \n");
    sb.append("    x.add(\'d\');                                          //065 \n");
    sb.append("    x.add(\'e\');                                          //066 \n");
    sb.append("    for(int i = 0; i < x.size(); i += 1) {                 //067 \n");
    sb.append("      char c = x.get(i);                                   //068 \n");
    sb.append("      std.print(\"%c\\n\", c);                             //069 \n");
    sb.append("    }                                                      //070 \n");
    sb.append("    return 0;                                              //071 \n");
    sb.append("  }                                                        //072 \n");
    sb.append("}                                                          //073 \n");
    //@formatter:on
