    //@formatter:off
    StringBuilder sb = new StringBuilder();
    sb.append("struct aux_fcall_stack {                                                   //001 \n");
    sb.append("    const char *func;                                                      //002 \n");
    sb.append("    int line;                                                              //003 \n");
    sb.append("};                                                                         //004 \n");
    sb.append("#define STACK_SIZE (1024)                                                  //005 \n");
    sb.append("struct aux_fcall_stack call_stack[STACK_SIZE] = { };                       //006 \n");
    sb.append("static size_t call_stack_nr = 0;                                           //007 \n");
    sb.append("static inline void __pushf(const char *__func, int __line);                //008 \n");
    sb.append("static inline void __popf();                                               //009 \n");
    sb.append("static void __dumpf();                                                     //010 \n");
    sb.append("static inline void __pushf(const char *__func, int __line)                 //011 \n");
    sb.append("{                                                                          //012 \n");
    sb.append("    if (call_stack_nr >= STACK_SIZE) {                                     //013 \n");
    sb.append("        fprintf(stderr, \"stack overflow: (%s:%d)\\n\", __func, __line);   //014 \n");
    sb.append("        __dumpf();                                                         //015 \n");
    sb.append("        exit(8);                                                           //016 \n");
    sb.append("    }                                                                      //017 \n");
    sb.append("    struct aux_fcall_stack fc = { .func = __func, .line = __line };        //018 \n");
    sb.append("    call_stack[call_stack_nr] = fc;                                        //019 \n");
    sb.append("    call_stack_nr += 1;                                                    //020 \n");
    sb.append("}                                                                          //021 \n");
    sb.append("static inline void __popf()                                                //022 \n");
    sb.append("{                                                                          //023 \n");
    sb.append("    assert(call_stack_nr > 0);                                             //024 \n");
    sb.append("    call_stack_nr -= 1;                                                    //025 \n");
    sb.append("}                                                                          //026 \n");
    sb.append("static void __dumpf()                                                      //027 \n");
    sb.append("{                                                                          //028 \n");
    sb.append("    fprintf(stdout, \"%s\\n\", \"\\nThe call-stack: \");                   //029 \n");
    sb.append("    for (size_t i = 0; i < call_stack_nr; i += 1) {                        //030 \n");
    sb.append("        struct aux_fcall_stack fc = call_stack[i];                         //031 \n");
    sb.append("        fprintf(stdout, \"  %s:%d\\n\", fc.func, fc.line);                 //032 \n");
    sb.append("    }                                                                      //033 \n");
    sb.append("}                                                                          //034 \n");
    //@formatter:on
