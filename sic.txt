* assign-var-destructor
* ref-unref methods
* op-assign - just a stub, like refs/unrefs
*


#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "mem.h"

#define ASSIGN(LVALUE, RVALUE, OBJNAME)               \
do {                                                  \
    if (LVALUE == NULL) {                             \
        if (RVALUE != NULL) {                         \
            /*LVALUE:null*/                           \
            /*RVALUE:object*/                         \
                                                      \
            /*1:REF, ASSIGN*/                         \
            OBJNAME##_ref(RVALUE);                    \
            LVALUE = RVALUE;                          \
        }                                             \
                                                      \
        else {                                        \
            /*LVALUE:null*/                           \
            /*RVALUE:null*/                           \
        }                                             \
    }                                                 \
                                                      \
    else {                                            \
        if (RVALUE != NULL) {                         \
            /*LVALUE:object*/                         \
            /*RVALUE:object*/                         \
                                                      \
            if((LVALUE) != (RVALUE)) {                \
                /*1:UNREF*/                           \
                LVALUE = OBJNAME##_deinit(LVALUE);    \
                                                      \
                /*2:REF, ASSIGN*/                     \
                OBJNAME##_ref(RVALUE);                \
                LVALUE = RVALUE;                      \
            }                                         \
        }                                             \
                                                      \
        else {                                        \
            /*LVALUE:object*/                         \
            /*RVALUE:null*/                           \
                                                      \
            /*1:UNREF*/                               \
            LVALUE = OBJNAME##_deinit(LVALUE);        \
                                                      \
            /*2:ASSIGN*/                              \
            LVALUE = NULL;                            \
        }                                             \
    }                                                 \
} while (0)

#define UNREF_RETURN(OBJNAME)        \
    if (object == NULL) {            \
        return NULL;                 \
    }                                \
    object->ref_count -= 1;          \
    if (object->ref_count == 0) {    \
        OBJNAME##_destroy(object);   \
        return NULL;                 \
    }                                \
    return object;

typedef int boolean;
typedef struct string * string;
int main_class_main_12();
char t31[] = { '\0' };
char t25[] = { '%', 'd', '\n', '\0' };
char t33[] = { 'x', '=', '[', '%', 's', ']', '\n', '\0' };
char t22[] = { '%', 's', '\n', '\0' };
char t20[] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\n', ' ',
        ' ', ' ', ' ', ' ', ' ', 'a', '.', 'b', '.', 'c', '.', 'd', '.', 'e', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\n',
        ' ', ' ', ' ', ' ', ' ', ' ', 'a', '.', 'b', '.', 'c', '.', 'd', '.', 'e', '.', 'f', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        '\n', ' ', ' ', ' ', ' ', ' ', ' ', 'a', '.', 'b', '.', 'c', '.', 'd', '.', 'e', '.', 'f',
        '.', 'g', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', '\n', ' ', ' ', ' ', ' ', '\0' };
char t28[] = { '%', 'c', '\n', '\0' };
struct string {
    char *buffer;
    size_t len;
    int ref_count;
};

void string_destroy(string object);
string string_deinit(string object);
void string_ref(string object);

void string_init(string __this, char *buf)
{
    assert(__this);
    assert(buf);
    __this->buffer = hstrdup(buf);
    __this->len = strlen(buf);
    __this->buffer[__this->len] = '\0';
    __this->ref_count = 1;
}
char string_get(string __this, size_t index)
{
    assert(__this);
    assert(index < __this->len);
    return __this->buffer[index];
}

void string_ref(string object)
{
    assert(object);
    object->ref_count += 1;
}

void string_destroy(string object)
{
    assert(object);
    free(object->buffer);
    free(object);
}

string string_deinit(string object)
{
    UNREF_RETURN(string);
}
static void std_print_string_char(string t27, char t29)
{
    printf(t27->buffer, t29);
}
static void std_print_string_string(string t35, string t37)
{
    printf(t35->buffer, t37->buffer);
}
static void std_print_string_int(string t24, int t26)
{
    printf(t24->buffer, t26);
}
int main_class_main_12()
{
    string t19 = hmalloc(sizeof(struct string));
    string_init(t19, t20);
    string s = NULL;
    ASSIGN(s, t19, string);
    string t21 = hmalloc(sizeof(struct string));
    string_init(t21, t22);
    string t23 = NULL;
    ASSIGN(t23, s, string);
    std_print_string_string(t21, t23);
    string t24 = hmalloc(sizeof(struct string));
    string_init(t24, t25);
    int t26 = 32;
    std_print_string_int(t24, t26);
    string t27 = hmalloc(sizeof(struct string));
    string_init(t27, t28);
    char t29 = '_';
    std_print_string_char(t27, t29);
    string t30 = hmalloc(sizeof(struct string));
    string_init(t30, t31);
    string x = NULL;
    ASSIGN(x, t30, string);
    string t32 = hmalloc(sizeof(struct string));
    string_init(t32, t33);
    string t34 = NULL;
    ASSIGN(t34, x, string);
    std_print_string_string(t32, t34);
    string t35 = hmalloc(sizeof(struct string));
    string_init(t35, t22);
    string t37 = NULL;
    ASSIGN(t37, x, string);
    std_print_string_string(t35, t37);
    int t38 = 0;
    t37 = string_deinit(t37);
    t35 = string_deinit(t35);
    t34 = string_deinit(t34);
    t32 = string_deinit(t32);
    x   = string_deinit(x);
    t30 = string_deinit(t30);
    t27 = string_deinit(t27);
    t24 = string_deinit(t24);
    t23 = string_deinit(t23);
    t21 = string_deinit(t21);
    s = string_deinit(s);
    t19 = string_deinit(t19);
    return t38;
}
int main(int args, char** argv)
{
    int result = main_class_main_12();
    printf("%d\n", result);
    return result;
}

