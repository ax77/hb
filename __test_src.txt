#include <assert.h>
#include <limits.h>
#include <stdarg.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void* hmalloc(size_t size);
void* hrealloc(void* old, size_t newsize);
void *hcalloc(size_t count, size_t eltsize);
char *hstrdup(char *str);

void* hmalloc(size_t size)
{
    if (size == 0) {
        size = 1;
    }
    assert(size < INT_MAX);

    void *ptr = NULL;
    ptr = malloc(size);
    if (ptr == NULL) {
        ptr = malloc(size);
        if (ptr == NULL) {
            ptr = malloc(size);
        }
    }
    assert(ptr);
    return ptr;
}

void* hrealloc(void* old, size_t newsize)
{
    void *ptr = NULL;
    ptr = realloc(old, newsize);
    if (ptr == NULL) {
        ptr = realloc(old, newsize);
        if (ptr == NULL) {
            ptr = realloc(old, newsize);
        }
    }
    assert(ptr);
    return ptr;
}

void *hcalloc(size_t count, size_t eltsize)
{
    assert(count);
    assert(eltsize);

    void* ptr = NULL;
    ptr = calloc(count, eltsize);
    if (ptr == NULL) {
        ptr = calloc(count, eltsize);
        if (ptr == NULL) {
            ptr = calloc(count, eltsize);
        }
    }
    assert(ptr);
    return ptr;
}

char *hstrdup(char *str)
{
    assert(str);
    size_t len = strlen(str);
    char* rv = (char*) hmalloc(len + 1);
    strcpy(rv, str);
    rv[len] = '\0';
    return rv;
}
