#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "mem.h"
typedef int boolean;
int main_class_main_21();
typedef struct array_char * array_char;
typedef struct string * string;
int main_class_main_21();
void string_init_12(string __this);
void string_appendInternal_15(string __this, char c);
char string_char_at_18(string __this, int index);
string string_opAssign_35(string __this, string rvalue);
void string_deinit_33(string __this);
struct array_char {
    char * data;
    size_t size, alloc;
};
char array_set_9char(array_char __this, int index, char e)
{
    assert(__this);
    assert(__this->data);
    assert(index < __this->size);
    char old = __this->data[index];
    __this->data[index] = e;
    return old;
}
array_char array_opAssign_25char(array_char __this, array_char rvalue)
{
    return rvalue;
}
void array_init_1char(array_char __this)
{
    assert(__this);
    __this->alloc = 2;
    __this->size = 0;
    __this->data = hmalloc(sizeof(char) * __this->alloc);
    for (size_t i = 0; i < __this->alloc; i++) {
        __this->data[i] = 0;
    }
}
void array_add_3char(array_char __this, char e)
{
    assert(__this);
    assert(__this->data);
    if (__this->size >= __this->alloc) {
        __this->alloc *= 2;
        __this->data = hrealloc(__this->data, sizeof(char) * __this->alloc);
    }
    __this->data[__this->size] = e;
    __this->size++;
}
char array_get_7char(array_char __this, int index)
{
    assert(__this);
    assert(__this->data);
    assert(index < __this->size);
    return __this->data[index];
}
void array_deinit_23char(array_char __this)
{
}
int array_size_5char(array_char __this)
{
    assert(__this);
    return __this->size;
}
struct string {
    array_char buffer;
};
void string_init_12(string __this)
{
    string t55 = NULL;
    t55 = string_opAssign_35(t55, __this);
    array_char t56 = t55->buffer;
    array_char t57 = hmalloc(sizeof(struct array_char));
    array_init_1char(t57);
    t55->buffer = t57;
    array_deinit_23char(t57);
    array_deinit_23char(t56);
    string_deinit_33(t55);
}
void string_appendInternal_15(string __this, char c)
{
    string t58 = NULL;
    t58 = string_opAssign_35(t58, __this);
    array_char t59 = t58->buffer;
    char t60 = c;
    array_add_3char(t59, t60);
    array_deinit_23char(t59);
    string_deinit_33(t58);
}
char string_char_at_18(string __this, int index)
{
    string t61 = NULL;
    t61 = string_opAssign_35(t61, __this);
    array_char t62 = t61->buffer;
    int t63 = index;
    char t64 = array_get_7char(t62, t63);
    array_deinit_23char(t62);
    string_deinit_33(t61);
    return t64;
}
string string_opAssign_35(string __this, string rvalue)
{
    string t65 = rvalue;
    return t65;
}
void string_deinit_33(string __this)
{
    string t66 = __this;
    array_char t67 = t66->buffer;
    array_deinit_23char(t67);
}
int main_class_main_21()
{
    string t37 = hmalloc(sizeof(struct string));
    string_init_12(t37);
    int t38 = 'a';
    int t39 = '.';
    int t40 = 'b';
    int t41 = '.';
    int t42 = 'c';
    string_appendInternal_15(t37, t38);
    string_appendInternal_15(t37, t39);
    string_appendInternal_15(t37, t40);
    string_appendInternal_15(t37, t41);
    string_appendInternal_15(t37, t42);
    string s = NULL;
    s = string_opAssign_35(s, t37);
    string t43 = NULL;
    t43 = string_opAssign_35(t43, s);
    int t44 = 1;
    char t45 = string_char_at_18(t43, t44);
    int t46 = '.';
    boolean t47 = t45 == t46;
    string t48 = NULL;
    t48 = string_opAssign_35(t48, s);
    int t49 = 2;
    char t50 = string_char_at_18(t48, t49);
    int t51 = 'b';
    boolean t52 = t50 == t51;
    boolean t53 = t47 && t52;
    string_deinit_33(t48);
    string_deinit_33(t43);
    string_deinit_33(s);
    string_deinit_33(t37);
    return t53;
}
int main(int args, char** argv)
{
    int result = main_class_main_21();
    printf("%d\n", result);
    return result;
}

